// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Application.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Emel\Desktop\Application\Application\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Emel\Desktop\Application\Application\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Emel\Desktop\Application\Application\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Emel\Desktop\Application\Application\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Emel\Desktop\Application\Application\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Emel\Desktop\Application\Application\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Emel\Desktop\Application\Application\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Emel\Desktop\Application\Application\Client\_Imports.razor"
using Application.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Emel\Desktop\Application\Application\Client\Pages\TableDesign.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Emel\Desktop\Application\Application\Client\Pages\TableDesign.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Emel\Desktop\Application\Application\Client\Pages\TableDesign.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Emel\Desktop\Application\Application\Client\Pages\TableDesign.razor"
using Entities.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class TableDesign : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 179 "C:\Users\Emel\Desktop\Application\Application\Client\Pages\TableDesign.razor"
       
    private bool isChecked = false;
    private string columnName;
    private int id;
    private string _value { get; set; }
    string recordId ="";
    private string inputValue;
    public Value val = new Value();
    private int colId;
    // private ElementReference formRef;
    string recordID;
    private bool _updateClicked;
    List<Column> columns = new List<Column>();
    List<Column> allColumns = new List<Column>();
    List<string> Logs = new List<string>();
    List<TableView> tableview = new List<TableView>();
    List<Value> inputValues = new List<Value>();
    List<string> number_of_vertical_records = new List<string>();
    List<string> values_to_update = new List<string>();

    private void isUpdate(string recordId)
    {
        recordID = recordId;
        values_to_update=tableview.Where(x => x._values.RecordId == recordId).Select(x => x._values.Value1).ToList();
        _updateClicked=true;
    }

    protected void GetColId(int value)
    {
        colId = value;

    }

    protected void GetId(int value)
    {
        id = value;
    }

    protected async void New()
    {
        await OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        _updateClicked = false;
        inputValues.Clear();
    }

    protected void SaveAll(int value)
    {
        Value val = new Value();
        colId = value;

        if(inputValue.Length>0&&inputValues.Where(x=>x.Value1==inputValue).Count()==0)
        {
            val.Value1 = inputValue;
            val.ColumnId = colId;
            if(_updateClicked==true)
            {
                var _id = tableview.Where(x => x._values.ColumnId == colId && x._values.RecordId == recordID).First()._values.Id;
                val.Id = _id;
            }
            inputValues.Add(val);
        }


    }

    protected override async Task OnInitializedAsync()
    {
        columns = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAllColumns");
        allColumns = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAll");
        Logs = await Http.GetFromJsonAsync<List<string>>("api/SystemLog/GetAllLogs");
        tableview = await Http.GetFromJsonAsync<List<TableView>>("api/Column/TableView");
        int takelast = tableview.Select(x => x._values.ColumnId).First();
        number_of_vertical_records = tableview.Where(x => x._values.ColumnId == takelast).Select(x=>x._values.RecordId.ToString()).ToList();
        _updateClicked = false;
        inputValues.Clear();
       
    }

    private void OnInputEvent(ChangeEventArgs changeEvent)
    {
        inputValue = (string)changeEvent.Value;
    }

    private async void HandleValidSubmit()
    { 
        recordId = Guid.NewGuid().ToString();
       
        if(_updateClicked)
        {
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 269 "C:\Users\Emel\Desktop\Application\Application\Client\Pages\TableDesign.razor"
             for (int i = 0; i <inputValues.Count ; i++)
            {
                int inx = i;
                var oldRecord = await Http.GetFromJsonAsync<List<Value>>("/api/Value/GetAll");
                Value Values = new Value { RecordId =recordID, Value1 = inputValues[inx].Value1, ColumnId = inputValues[inx].ColumnId };
                var response = await Http.PutAsJsonAsync($"/api/Value/Update/{inputValues[inx].Id}", Values);
            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 275 "C:\Users\Emel\Desktop\Application\Application\Client\Pages\TableDesign.razor"
             
            await OnInitializedAsync();
        }

        else
        {
            foreach (var item in inputValues)
            {
                Value Values = new Value { RecordId = recordId, Value1 = item.Value1, ColumnId = item.ColumnId };
                var response = await Http.PostAsJsonAsync<Value>("/api/Value/AddValue", Values);
                response.StatusCode.ToString();
            }
            await OnInitializedAsync();

        }
        await InvokeAsync(StateHasChanged);
        New();

    }

    private async Task AddNewColumn()
    {
        int? order = 0;
        var setOrderNumber = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAllColumns");
        if (setOrderNumber.Count < 1)
        {
            order = 1;
        }
        else if (setOrderNumber.Count > 0)
        {
            var query = setOrderNumber.OrderByDescending(x => x.Order).FirstOrDefault();
            order = query.Order + 1;
        }
        Column column = new Column { Name = columnName, IsVisible = true, Order = order };
        var response = await Http.PostAsJsonAsync<Column>("/api/Column/AddColumn", column);
        response.StatusCode.ToString();

        await OnInitializedAsync();
    }


                        
    private async Task DeleteColumn(int Id)
    {
        var response = await Http.DeleteAsync("/api/Column/Delete/" + Id);
        response.StatusCode.ToString();

        await OnInitializedAsync();
    }

    private async Task UpdateColumn(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            var oldRecord = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAll");
            var list = oldRecord.FirstOrDefault(x => x.Id == id);

            Column col = new Column { Name = _value, IsVisible = list.IsVisible, Order = list.Order };
            var response = await Http.PutAsJsonAsync($"/api/Column/UpdateColumns/{id}", col);
            await OnInitializedAsync();
        }
    }

    private async Task Hide(ChangeEventArgs e)
    {
        isChecked = Convert.ToBoolean(e.Value);
        var get = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAll");
        var oldRecord = get.FirstOrDefault(x => x.Id == id);

        Column column = new Column { IsVisible = isChecked, Order = oldRecord.Order, Name = oldRecord.Name };

        var result = await Http.PutAsJsonAsync<Column>($"/api/Column/UpdateRecord/{id}", column);
        var repsonse = result.StatusCode.ToString();
        await OnInitializedAsync();
    }


    private async Task ChangeColumnOrder(int? order, int id)
    {
        var list = await Http.GetFromJsonAsync<List<Column>>("/api/Column/GetAllColumns");
        var col1 = list.FirstOrDefault(x => x.Id == id);
        var col2 = list.FirstOrDefault(x => x.Order == order);

        Column column1 = new Column { Name = col1.Name, Order = col2.Order, IsVisible = col1.IsVisible };
        Column column2 = new Column { Name = col2.Name, Order = col1.Order, IsVisible = col2.IsVisible };


        var response2 = await Http.PutAsJsonAsync($"/api/Column/UpdateColumns/{col1.Id}", column1);

        var response = await Http.PutAsJsonAsync($"/api/Column/UpdateColumns/{col2.Id}", column2);
        response.StatusCode.ToString();
        response2.StatusCode.ToString();

        await OnInitializedAsync();
    }

    private async Task DeleteValue(string recordId)
    {
        var record = tableview.Where(x => x._values.RecordId == recordId).Select(x => x._values.Id).ToList();
        foreach (var item in record)
        {
            var response = await Http.DeleteAsync("/api/Value/Delete/" + item);
             response.StatusCode.ToString();
        }
        await OnInitializedAsync();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
